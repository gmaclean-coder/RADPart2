public with sharing class WeekTwoHomework {

    /*A method that includes a query for a List of contacts and returns the Account Name and Industry as well.  
    Use a loop to print the name of each Contact’s Account Name with System.debug.*/

    public static void accountsWithIndustry () {
        List <contact> conList = [SELECT ID, Account.Name, Account.Industry FROM Contact ];
        for(contact ct : conList ){
            system.debug ('Account Name: '+ ct.account.name + 'Industry: ' + ct.account.Industry);

        }
    }

    /*A method that includes a query for a list of Accounts AND includes all their closed-won opportunities in a subquery. 
    Use a loop to print out the name of each Account’s opportunity with System.debug.*/

    public static void closedWonAccounts () {
        List<Account> accList = [
            SELECT Name, (SELECT ID, Name FROM Opportunities WHERE StageName = 'Closed Won') 
            FROM Account
            ];
        for( account acc: accList){
         //system.debug('List of accounts: ' + acc.name);
            for(opportunity opp: acc.Opportunities){
            system.debug('List of account opportunities: ' + opp.name);
            }
        }
    }

    // A method that queries for Opportunity records that returns results in a map format.
    public static Map<Id, Opportunity> opportunityMap () {
       Map <ID, Opportunity> oppMap = new Map <ID, Opportunity> (
            [SELECT ID, Name, Amount FROM Opportunity WHERE Amount > 10000]
        );
        system.debug('Map results: '+ oppMap);

        return oppMap;
    }

    //An aggregate results query that returns an integer equal to the total number of open opportunities in your org.
    public static void openOpportunities () {
        Integer openOpps = [SELECT COUNT() FROM Opportunity WHERE IsClosed = false]; // using count allows us to put results directly into an integer
        system.debug ('Number of Opportunities: ' + openOpps);
    }
}
